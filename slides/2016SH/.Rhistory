if(datai$d02<1e-5 & datai$d03>1e-4){
out[[i]] = c(datai$id, datai$lat2, datai$lng2, 1)
}else{
out[[i]] = c(datai$id, datai$lat3, datai$lng3, 2)
}
}else{
if(datai$label=="Success"){
if(is.na(datai$lat0)){
out[[i]] = c(datai$id, datai$lat2, datai$lng2, 0)
next
}
if(is.na(datai$lat2)){
out[[i]] = c(datai$id, datai$lat0, datai$lng0, 0)
next
}
if(datai$d02<1e-3){
out[[i]] = c(datai$id, datai$lat2, datai$lng2, 3)
}else{
out[[i]] = c(datai$id, datai$lat0, datai$lng0, 4)
}
}else{
if(is.na(datai$lat0)){
out[[i]] = c(datai$id, datai$lat2, datai$lng2, 0)
next
}
if(is.na(datai$lat2)){
out[[i]] = c(datai$id, datai$lat0, datai$lng0, 0)
next
}
if(datai$d02<1e-5){
out[[i]] = c(datai$id, datai$lat2, datai$lng2, 5)
}else{
out[[i]] = c(datai$id, datai$lat0, datai$lng0, 6)
}
}
}
}
finalGeo = do.call(rbind, out) %>% as.data.frame
names(finalGeo) = c("id", "lat", "lng", "cleanlabel")
finalGeo =  finalGeo %>% left_join(data, by="id") %>%
select(make, lat = lat.x,
lng = lng.x,
salName_short,
saleName,
Brand,
Region,
Address,
refYear,
stdCity,
City,
Province,
DealerType)
finalGeo$City = as.character(finalGeo$City )
finalGeo$stdCity = as.character(finalGeo$stdCity)
finalGeo$refYear = as.character(finalGeo$refYear)
finalGeo$refYear[finalGeo$refYear=="#N/A"]=NA
finalGeo[finalGeo=="襄阳"] = "襄阳市"
finalGeo[finalGeo=="东营"] = "东营市"
finalGeo[finalGeo$saleName=="安徽永达捷豹路虎(4S店)",]$lat = 31.803649
finalGeo[finalGeo$saleName=="安徽永达捷豹路虎(4S店)",]$lng = 117.356664
writeLines(
paste0("var dealerOutput = ",
toJSON(finalGeo, pretty = T)),
'dealerInfo.JSON',
useBytes = T
)
library(dplyr)
library(jsonlite)
library(JDpowerGIS)
Sys.setlocale("LC_CTYPE", "chs")
data = read.csv("check.csv", encoding="GB2312")
#
# ## read from amap API
# getCoorFromAmap = function(address, city){
#   address = paste(c("", charToRaw(as.character(address))),collapse="%")
#   city = as.character(city)
#   ak = '4751a483de9ddb4f04dc438033c6ae19'
#   url = sprintf("http://restapi.amap.com/v3/geocode/geo?key=%s&address=%s&city=%s",
#                ak,
#                address,
#                city)
#   raw = try(readLines(url, encoding="UTF-8"))
#   return(raw)
# }
getCoorFromAmap = function(address){
Sys.sleep(2+runif(1)*2)
address = as.character(address)
url = paste0(
# "http://restapi.amap.com/v3/place/text?s=rsv3&key=169d2dd7829fe45690fabec812d05bc3&offset=10&page=1&language=zh_cn&callback=jsonp_632235_&platform=JS&logversion=2.0&sdkversion=1.3&appname=http%3A%2F%2Fwww.gpsspg.com%2Fiframe%2Fmaps%2Famap_160703.htm%3Fmapi%3D3&csid=2E97772F-79DC-4F18-BBC5-DF837C538FF2&keywords=",
"http://restapi.amap.com/v3/place/text?s=rsv3&key=169d2dd7829fe45690fabec812d05bc3&offset=10&page=1&language=zh_cn&callback=jsonp_866300_&platform=JS&logversion=2.0&sdkversion=1.3&appname=http%3A%2F%2Fwww.gpsspg.com%2Fiframe%2Fmaps%2Famap_160703.htm%3Fmapi%3D3&csid=EFF6AFFA-FA93-4D4D-9C71-77C6933CEBCA&keywords=",
address)
raw = try(readLines(url, encoding="UTF-8"))
cat(address, "is finished!\n")
return(raw)
}
searchData = select(data, id, salName_short, City)
options(warn=-1)
options(digits=12)
if(F){
answer = apply(searchData, 1, function(x) getCoorFromAmap(x[2]))
save(answer, file = "return.Rdata")
}
# searchData[2000,]
load("return.Rdata")
cleanJSON = function(rawString, address, id){
# i = 1
# rawString = answer[[i]]
# address = searchData[i,2]
# id =  searchData[i,1]
# Format:
# id rawquery name address type geo label
address = iconv(as.character(address),"GB2312","UTF-8")
if(rawString == "Error in file(con, \"r\") : cannot open the connection\n"){
# j <<- j+1
return(c(id, address, NA, NA, NA, NA, "E1"))
# cat(j,address,"\n")
# return(NULL)
}
content = sub("jsonp_632235_(", "", rawString, fixed = T)
content = substr(content,1,nchar(content)-1)
outData = fromJSON(content)$pois
if(length(outData)==0){
# j <<- j+1
return(c(id, address, NA, NA, NA, NA, "E2"))
# cat(j,address,"\n")
}else{
outData = rbind(outData[grepl(pattern ="汽车", outData$type),], outData)
}
if(!grepl(address,outData$name[1])){
# j <<- j+1
if(grepl(pattern ="汽车", outData[1,3])){
return(c(id, address,
outData[1,2],
outData[1,6],
outData[1,3],
outData[1,7], "E4"))
}else{
return(c(id,address,
outData[1,2],
outData[1,6],
outData[1,3],
outData[1,7], "E3"))
}
# cat(j,address, " ", outData$name[1], "\n")
}else{
# j <<- j+1
return(c(id, address,
outData[1,2],
outData[1,6],
outData[1,3],
outData[1,7],
"Success"))
# cat(j, outData[1,2], " ", unlist(outData[1,6]), " ", outData[1,7], "\n")
}
}
resultData = list()
for( i in 1:2024){
resultData[[i]] = cleanJSON(rawString = answer[[i]],
address = searchData[i,2],
id = searchData[i,1])
}
unlist2 = function(x){
output = c()
for(i in 1:length(x)){
if(length(x[[i]])==0){
output = append(output, NA)
}else{
output = append(output, x[[i]])
}
}
return(output)
}
scrapData = do.call(rbind, resultData)%>% as.data.frame
for(i in 1:length(scrapData)){
scrapData[[i]] = unlist2(scrapData[[i]])
}
# View(scrapData)
point = sapply(scrapData$V6, function(x){
if(is.na(x)){
return(rep(NA,4))
}else{
return(string2Geo(x))
}
}) %>% t %>% as.data.frame %>%
plyr::colwise(unlist)(.)
row.names(point) = NULL
point = gd2bd(point)
output = cbind(data,scrapData, point)
# xlsx::write.xlsx(output, "rawResult.xlsx")
## start to clean
head(output)
showLat = Vectorize(function(raw){
raw = as.character(raw)
if(is.na(raw)){
return(NA)
}
a = as.numeric(strsplit(raw,",")[[1]])
if(length(a[a>50])==0){
return(NA)
}else{
return(a[a>50])
}
})
showLng = Vectorize(function(raw){
raw = as.character(raw)
if(is.na(raw)){
return(NA)
}
a = as.numeric(strsplit(raw,",")[[1]])
if(length(a[a<50])==0){
return(NA)
}else{
return(a[a<50])
}
})
names(output)[28:29] = c("V8","V9")
output[output=="#N/A"]=NA
forClean = output %>% select(id, make, saleName,
Address, City, DealerType)
forClean$lat0 = as.numeric(as.character(output$lat))
forClean$lng0 = as.numeric(as.character(output$lng))
forClean$lat1 = output$lon1
forClean$lng1 = output$lat1
forClean$lat2 = output$V9
forClean$lng2 = output$V8
forClean$lat3 = showLng(output$new) %>% unlist()
forClean$lng3 = showLat(output$new) %>% unlist()
forClean$label = output$V7
# View(forClean)
dis = function(a,b){
(forClean[[paste0('lat',a)]] - forClean[[paste0('lat',b)]])^2 +
(forClean[[paste0('lng',a)]] - forClean[[paste0('lng',b)]])^2
}
forClean$d01 = dis(0,1)
forClean$d02 = dis(0,2)
forClean$d03 = dis(0,3)
forClean$d12 = dis(1,2)
forClean$d13 = dis(1,3)
forClean$d23 = dis(2,3)
out = list()
for(i in 1:dim(forClean)[1]){
datai = forClean[i,]
if(!is.na(datai$lat3)){
if(is.na(datai$lat0) | is.na(datai$lat2)){
out[[i]] = c(datai$id, datai$lat3, datai$lng3, 0)
next
}
if(datai$d02<1e-5 & datai$d03>1e-4){
out[[i]] = c(datai$id, datai$lat2, datai$lng2, 1)
}else{
out[[i]] = c(datai$id, datai$lat3, datai$lng3, 2)
}
}else{
if(datai$label=="Success"){
if(is.na(datai$lat0)){
out[[i]] = c(datai$id, datai$lat2, datai$lng2, 0)
next
}
if(is.na(datai$lat2)){
out[[i]] = c(datai$id, datai$lat0, datai$lng0, 0)
next
}
if(datai$d02<1e-3){
out[[i]] = c(datai$id, datai$lat2, datai$lng2, 3)
}else{
out[[i]] = c(datai$id, datai$lat0, datai$lng0, 4)
}
}else{
if(is.na(datai$lat0)){
out[[i]] = c(datai$id, datai$lat2, datai$lng2, 0)
next
}
if(is.na(datai$lat2)){
out[[i]] = c(datai$id, datai$lat0, datai$lng0, 0)
next
}
if(datai$d02<1e-5){
out[[i]] = c(datai$id, datai$lat2, datai$lng2, 5)
}else{
out[[i]] = c(datai$id, datai$lat0, datai$lng0, 6)
}
}
}
}
finalGeo = do.call(rbind, out) %>% as.data.frame
names(finalGeo) = c("id", "lat", "lng", "cleanlabel")
finalGeo =  finalGeo %>% left_join(data, by="id") %>%
select(make, lat = lat.x,
lng = lng.x,
salName_short,
saleName,
Brand,
Region,
Address,
refYear,
stdCity,
City,
Province,
DealerType)
finalGeo$City = as.character(finalGeo$City )
finalGeo$stdCity = as.character(finalGeo$stdCity)
finalGeo$refYear = as.character(finalGeo$refYear)
finalGeo$refYear[finalGeo$refYear=="#N/A"]=NA
finalGeo[finalGeo=="襄阳"] = "襄阳市"
finalGeo[finalGeo=="东营"] = "东营市"
finalGeo[finalGeo$saleName=="安徽永达捷豹路虎(4S店)",]$lat = 31.803649
finalGeo[finalGeo$saleName=="安徽永达捷豹路虎(4S店)",]$lng = 117.356664
writeLines(
paste0("var dealerOutput = ",
toJSON(finalGeo, pretty = T)),
'dealerInfo.JSON',
useBytes = T
)
getwd()
install.packages("webshot")
webshot::install_phantomjs
library(webshot)
install.packages("webshot")
webshot::install_phantomjs()
?webshot
library(wordcloud2)
hw = wordcloud2(demoFreq)
htmlwidgets::saveWidgets(hw,"1.html")
htmlwidgets::saveWidget(hw,"1.html")
webshot("1.html","new.png", delay =3)
webshot::webshot("1.html","new.png", delay =3)
getwd()
?webshot
webshot::webshot("1.html", delay =3)
hw
?webshot
?saveWidgets
?saveWidget
htmlwidgets::saveWidget(hw,"1.html",selfcontained = TRUE)
hw
class(hw)
library(htmlwidgets)
htmlwidget.print
print.htmlwidget
htmlwidgets:::print.htmlwidget
debug(htmlwidgets:::print.htmlwidget)
hw
url
debug(html_print)
debug(htmlwidgets:::html_print)
debug(htmltools::html_print)
hw
html
htmlwidgets::saveWidget(htmltools::as.tags(x, standalone = TRUE),"1.html",selfcontained = TRUE)
htmlwidgets::saveWidget(htmltools::as.tags(hw, standalone = TRUE),"1.html",selfcontained = TRUE)
htmltools::as.tags(hw, standalone = TRUE)
undebug(htmlwidgets:::print.htmlwidget)
undebug(htmltools::html_print)
htmlwidgets::saveWidget(htmltools::as.tags(hw, standalone = TRUE),"1.html",selfcontained = TRUE)
htmltools::as.tags(hw, standalone = TRUE)
saveWidget(htmltools::as.tags(hw, standalone = TRUE),"1.html")
class(htmltools::as.tags(hw, standalone = TRUE))
saveWidget(hw,"1.html",selfcontained = F)
webshot::webshot("1.html", delay =3)
webshot::webshot("1.html", delay =3) %>% shink()
library(dplyr)
webshot::webshot("1.html", delay =3) %>% shink()
webshot::webshot("1.html", delay =3) %>%  shrink()
webshot
?webshot
saveWidget(hw,"1.html","1.pdf",selfcontained = F)
webshot::webshot("1.html","1.pdf", delay =3)
webshot::webshot("1.html",file = "1.pdf", delay =3)
getwd*(
getwd*(
getwd()
webshot::webshot("1.html","1.png",vwidth = 1992, vheight = 1744, delay =3)
?wordcloud2
hw = wordcloud2(demoFreq,size = 5)
saveWidget(hw,"1.html",selfcontained = F)
webshot::webshot("1.html","1.png",vwidth = 1992, vheight = 1744, delay =3)
webshot::webshot("1.html","1.png",vwidth = 1992, vheight = 1744, delay =10)
hw = wordcloud2(demoFreq,size = 3)
saveWidget(hw,"1.html",selfcontained = F)
webshot::webshot("1.html","1.png",vwidth = 1992, vheight = 1744, delay =10)
a = c("永康", "晋江", "西宁", "瑞安", "江门", "江阴", "赣州", "临沂" , "扬州", "镇江", "包头", "沧州", "鞍山", "保定", "慈溪", "廊坊", "襄阳市", "盐城", "淮安", "张家港" ,"张家港", "昆山", "宜兴", "富阳", "太仓","诸暨","东阳","安阳", "蚌埠", "宝鸡", "常德", "潮州", "郴州", "承德", "赤峰", "达州", "大庆", "大同", "德阳", "东营市", "阜阳", "桂林", "衡阳", "吉林", "济宁", "锦州", "九江", "拉萨", "乐山", "丽水", "连云港", "临汾", "柳州", "龙岩", "娄底", "马鞍山", "南充", "宁德", "攀枝花", "平顶山", "莆田", "秦皇岛", "衢州", "三明", "商丘", "上饶", "十堰", "泰安", "威海", "乌海", "咸阳", "信阳", "邢台", "宿迁", "延安", "宜宾", "营口", "玉溪", "枣庄", "湛江", "漳州", "长治", "肇庆", "株洲", "开封", "淮南", "佳木斯", "济源", "黄山", "本溪", "滨州", "德州", "恩施", "鄂州", "广元", "汉中", "菏泽", "衡水", "晋中", "晋城", "开封", "六安", "茂名", "清远", "韶关", "铁岭", "孝感", "宜昌", "遵义", "铜陵", "揭阳", "驻马店", "黄冈", "黄石", "荆门", "荆州", "怀化", "岳阳", "呼伦贝尔", "溧阳", "常熟", "吴江", "景德镇", "延边", "日照", "泸州", "眉山", "大理", "海宁", "桐乡", "嵊州", "苍南", "乐清", "舟山" )
library(wordcloud2)
wordcloud2(demoFreq)
install.packages("jsonlite")
library(wordcloud2)
wordcloud2(demoFreq)
library(wordcloud2)
wordcloud2(demoFreq)
library(wordcloud2)
wordcloud2(demoFreq)
figPath = system.file("examples/t.png",package = "wordcloud2")
wordcloud2(demoFreq, figPath = figPath, size = 1.5,color = "skyblue")
library(wordcloud2)
figPath = system.file("examples/t.png",package = "wordcloud2")
wordcloud2(demoFreq, figPath = figPath, size = 1.5,color = "skyblue")
figPath = system.file("examples/t.png",package = "wordcloud2")
wordcloud2(demoFreq, figPath = figPath, size = 1.5,color = "skyblue")
library(wordcloud2)
letterCloud(demoFreq,"R")
library(wordcloud2)
letterCloud(wordcloud2,word="R")
letterCloud(demoFreq,word="R")
letterCloud(demoFreq,word="R")
library(wordcloud2)
letterCloud(demoFreq,word="R")
library(wordcloud2)
letterCloud(dedmoFreq,word="R")
letterCloud(demoFreq,word="R")
library(slidify)
slidify("index.Rmd")
setwd("D:/git/reveal_slidify/slides/2016HZ")
slidify("index.Rmd")
library(ggplot2)
ggpl呕吐（
ggplot(mtcars)
ggplot(mtcars,aes(mpg,hpg))
names(mtcars)
ggplot(mtcars,aes(mpg,disp))
ggplot(mtcars,aes(mpg,disp)) + geom_point()
ggplot(mtcars,aes(mpg,disp,color=cyl)) + geom_point()
ggplot(mtcars,aes(mpg,disp,color=as.factor(cyl))) + geom_point()
ggplot(mtcars,aes(mpg,disp,color=as.factor(cyl),size=wt)) + geom_point()
ggplot(mtcars,aes(mpg,disp,color=as.factor(cyl),size=wt)) + geom_point(position="jitter")
ggplot(mtcars,aes(mpg,disp,color=as.factor(cyl),size=wt)) + geom_point(position="jitter")+facet_wrap(~gear)
?mtcars
??Car
names(cars)
names(mpg)
ggplot(mtcars,aes(cty, hwy, color=displ, size=fl)) + geom_point(position="jitter")+facet_wrap(~year)
ggplot(mtcars,aes(cty, hwy, color=displ, size=fl)) + geom_point(position="jitter")
ggplot(mtcars,aes(cty, hwy, color=displ, size=fl)) + geom_point(position="jitter")
ggplot(mtcars,aes(cty, hwy, color=displ, size=fl))
ggplot(mpg,aes(cty, hwy, color=displ, size=fl)) + geom_point(position="jitter")+facet_wrap(~year)
ggplot(mpg,aes(cty, hwy, color=fl, size=displ)) + geom_point(position="jitter")+facet_wrap(~year)
?mpg
?markdown
??markdown
library(slidify)
install.packages("yaml")
library(slidify)
slidify("index.Rmd")
library(knitr)
# make this an external chunk that can be included in any file
options(width = 100,digits=4)
opts_chunk$set(message = FALSE, fig.align = "center", warning = FALSE, comment = NA, dpi = 100, tidy = FALSE, fig.width=8,fig.height=5,cache = FALSE)
knit_hooks$set(plot = knitr:::hook_plot_html)
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
df <- data.frame(
id = 1:10,
name = c("Bob", "Ashley", "James", "David", "Jenny",
"Hans", "Leo", "John", "Emily", "Lee"),
age = c(28, 27, 30, 28, 29, 29, 27, 27, 31, 30),
grade = c("C", "A", "A", "C", "B", "B", "B", "A", "C", "C"),
test1_score = c(8.9, 9.5, 9.6, 8.9, 9.1, 9.3, 9.3, 9.9, 8.5, 8.6),
test2_score = c(9.1, 9.1, 9.2, 9.1, 8.9, 8.5, 9.2, 9.3, 9.1, 8.8),
final_score = c(9, 9.3, 9.4, 9, 9, 8.9, 9.25, 9.6, 8.8, 8.7),
registered = c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE),
stringsAsFactors = FALSE)
install.packages("formattable")
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
install.packages("formattable")
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))->formattable
library(htmlwidgets)
saveWidget(formattable,"html/formattable.html")
saveWidget(formattable,file = "html/formattable.html")
formattable
?saveWidget
saveWidget(formattable,file = "html/formattable.html",selfcontained = F)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
devtools::install_github("lchiffon/slidify")
